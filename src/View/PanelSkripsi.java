/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package View;

import Database.Pengarang;
import Database.Tesis;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author milea
 */
public class PanelSkripsi extends javax.swing.JPanel {

    int id;

    /**
     * Creates new form panelBuku
     */
    public PanelSkripsi() {
        initComponents();
        tampil();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelAdd = new javax.swing.JPanel();
        btnInsert = new javax.swing.JButton();
        inputJudul = new javax.swing.JTextField();
        inputPengarang = new javax.swing.JTextField();
        inputJumlahHalaman = new javax.swing.JTextField();
        inputTahunTerbit = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        inputPencarian = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelSkripsi = new javax.swing.JTable();
        btnPrint = new javax.swing.JButton();
        inputTipeSearch = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(618, 383));
        setLayout(new java.awt.BorderLayout());

        panelAdd.setBackground(new java.awt.Color(255, 255, 255));
        panelAdd.setPreferredSize(new java.awt.Dimension(618, 383));

        btnInsert.setBackground(new java.awt.Color(250, 204, 21));
        btnInsert.setForeground(new java.awt.Color(255, 255, 255));
        btnInsert.setText("Tambah");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        inputJudul.setText("Judul Buku");

        inputPengarang.setText("Pengarang");

        inputJumlahHalaman.setText("Jumlah Halaman");

        inputTahunTerbit.setText("Tahun Terbit");

        btnUpdate.setBackground(new java.awt.Color(250, 204, 21));
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(250, 204, 21));
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        inputPencarian.setText("Cari Sesuatu");
        inputPencarian.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(250, 204, 21), 1, true));
        inputPencarian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputPencarianActionPerformed(evt);
            }
        });
        inputPencarian.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputPencarianKeyTyped(evt);
            }
        });

        tabelSkripsi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "No", "Judul", "Thn Terbit", "Pengarang", "Jumlah Halaman"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelSkripsi.setShowGrid(false);
        tabelSkripsi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelSkripsiMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelSkripsi);

        btnPrint.setBackground(new java.awt.Color(250, 204, 21));
        btnPrint.setForeground(new java.awt.Color(255, 255, 255));
        btnPrint.setText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        inputTipeSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Judul", "Pengarang", "Tahun Terbit" }));

        javax.swing.GroupLayout panelAddLayout = new javax.swing.GroupLayout(panelAdd);
        panelAdd.setLayout(panelAddLayout);
        panelAddLayout.setHorizontalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addComponent(btnInsert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPrint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(42, 42, 42)
                        .addComponent(inputTipeSearch, 0, 64, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputPencarian, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(inputJudul, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputPengarang, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputJumlahHalaman, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(inputTahunTerbit, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))))
                .addGap(20, 20, 20))
        );
        panelAddLayout.setVerticalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputJudul, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputJumlahHalaman, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputPengarang, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputTahunTerbit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInsert)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(inputPencarian, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPrint)
                    .addComponent(inputTipeSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        add(panelAdd, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void tampil() {
        EntityManager entityManager = Persistence.createEntityManagerFactory("tugasAkhirPBOPU").createEntityManager();
        entityManager.getTransaction().begin();
        TypedQuery<Tesis> querySelectAll = entityManager.createNamedQuery("Tesis.findAll", Tesis.class);
        List<Tesis> results = querySelectAll.getResultList();

        DefaultTableModel model = (DefaultTableModel) tabelSkripsi.getModel();
        model.setRowCount(0);
        for (Tesis data : results) {
            TypedQuery<Pengarang> queryGetPengarang = entityManager.createNamedQuery("Pengarang.findNamaByTesisId", Pengarang.class);
            queryGetPengarang.setParameter("tesisId", data);
            Pengarang pgr = queryGetPengarang.getSingleResult();
            Object[] baris = new Object[6];
            baris[0] = data.getTesisId();
            baris[1] = data.getJudul();
            baris[2] = data.getTahunTerbit();
            baris[3] = pgr.getName();
            baris[4] = data.getJumlahHalaman();
            model.addRow(baris);
        }
        entityManager.getTransaction().commit();
        entityManager.close();
    }

    public void peringatan(String pesan) {
        JOptionPane.showMessageDialog(this, pesan);
    }

    private void resetField() {
        inputJudul.setText("Judul Skripsi");
        inputPengarang.setText("Pengarang");
        inputJumlahHalaman.setText("Jumlah Halaman");
        inputTahunTerbit.setText("Tahun Terbit");

    }

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        // TODO add your handling code here:
        String judul = inputJudul.getText();
        String pengarang = inputPengarang.getText();
        int jumlahHalaman = Integer.parseInt(inputJumlahHalaman.getText());
        int tahunTerbit = Integer.parseInt(inputTahunTerbit.getText());
//        Date time = new Date();

        if (!judul.isEmpty() && !pengarang.isEmpty() && tahunTerbit > 0 && jumlahHalaman > 0) {
            EntityManager entityManager = Persistence.createEntityManagerFactory("tugasAkhirPBOPU").createEntityManager();
            try {
                entityManager.getTransaction().begin();
                Tesis skripsi = new Tesis();
                skripsi.setJudul(judul);
                skripsi.setJumlahHalaman(jumlahHalaman);
                skripsi.setTahunTerbit(tahunTerbit);
//                skripsi.setCreatedAt(time);
//                skripsi.setUpdatedAt(time);
                entityManager.persist(skripsi);

                TypedQuery<Tesis> query = entityManager.createNamedQuery("Tesis.findLastById", Tesis.class);
                Tesis skripsiLastId = query.setMaxResults(1).getSingleResult();

                Pengarang tbPengarang = new Pengarang();
                tbPengarang.setTesisId(skripsiLastId);
                tbPengarang.setName(pengarang.trim());
                entityManager.persist(tbPengarang);

//              begin log
//              endlog
                entityManager.getTransaction().commit();

                this.peringatan("Berhasil menambahkan data!");
            } catch (Exception e) {
                entityManager.getTransaction().rollback();
                this.peringatan("Tambah data gagal. Pesan: " + e.getMessage());
            }
            entityManager.close();
        } else {
            this.peringatan("Input Data Buku Gagal");
        }
        this.tampil();
        this.resetField();
    }//GEN-LAST:event_btnInsertActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        if (this.id != 0) {
            String judul = inputJudul.getText();
            String pengarang = inputPengarang.getText();
            int jumlahHalaman = Integer.parseInt(inputJumlahHalaman.getText());
            int tahunTerbit = Integer.parseInt(inputTahunTerbit.getText());
            Date time = new Date();
            if (!judul.isEmpty() && !pengarang.isEmpty() && tahunTerbit > 0 && jumlahHalaman > 0) {
                EntityManager entityManager = Persistence.createEntityManagerFactory("tugasAkhirPBOPU").createEntityManager();
                try {
                    entityManager.getTransaction().begin();
                    TypedQuery<Tesis> query = entityManager.createNamedQuery("Tesis.findByTesisId", Tesis.class);
                    query.setParameter("tesisId", this.id);
                    Tesis tesis = query.setMaxResults(1).getSingleResult();

                    tesis.setJudul(judul);
                    tesis.setJumlahHalaman(jumlahHalaman);
                    tesis.setTahunTerbit(tahunTerbit);
//                    daftarSkripsi.setCreatedAt(time);
//                    daftarSkripsi.setUpdatedAt(time);
                    entityManager.merge(tesis);

                    TypedQuery<Pengarang> queryGetPengarang = entityManager.createNamedQuery("Pengarang.findNamaByTesisId", Pengarang.class);
                    queryGetPengarang.setParameter("tesisId", tesis);
                    Pengarang pgr = queryGetPengarang.getSingleResult();

                    pgr.setName(pengarang.trim());
                    entityManager.merge(pgr);

                    entityManager.getTransaction().commit();
                    this.peringatan("Berhasil mengubah data!");
                } catch (Exception e) {
                    entityManager.getTransaction().rollback();
                    this.peringatan("Gagal mengubah data. Pesan peringantan: " + e.getMessage());
                }
                entityManager.close();
            } else {
                this.peringatan("Update Data Mahasiswa Gagal");
            }
            this.tampil();
            this.resetField();
        } else {
            this.peringatan("Pilih data terlebih dahulu!");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if (this.id > 0) {
            EntityManager entityManager = Persistence.createEntityManagerFactory("tugasAkhirPBOPU").createEntityManager();
            try {
                entityManager.getTransaction().begin();
                TypedQuery<Tesis> query = entityManager.createNamedQuery("Tesis.findByTesisId", Tesis.class);
                query.setParameter("tesisId", this.id);
                Tesis daftarSkripsi = query.setMaxResults(1).getSingleResult();
                entityManager.remove(daftarSkripsi);
                entityManager.getTransaction().commit();
                this.peringatan("Berhasil menghapus data!");
            } catch (Exception e) {
                entityManager.getTransaction().rollback();
                this.peringatan("Gagal menghapus data. Pesan: " + e.getMessage());
            }
            entityManager.close();
        } else {
            this.peringatan("Pilih data terlebih dahulu!");
        }
        this.resetField();
        this.tampil();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        // TODO add your handling code here:
        int selectedIndex = inputTipeSearch.getSelectedIndex();
        String queryTypeSearch = "Tesis.findByJudulLike";
        String column = "judul";
        String searchBy = "Judul";
        if (selectedIndex == 2) {
            queryTypeSearch = "Tesis.findByTahunTerbit";
            column = "tahunTerbit";
            searchBy = "Tahun Terbit";
        }
        String kataKunci = inputPencarian.getText();
        if (kataKunci.equalsIgnoreCase("Cari Sesuatu")) {
            kataKunci = "";
        }

        EntityManager entityManager = Persistence.createEntityManagerFactory("tugasAkhirPBOPU").createEntityManager();
        entityManager.getTransaction().begin();
        TypedQuery<Tesis> query;
        if (selectedIndex == 1) {
            query = entityManager.createQuery("SELECT t FROM Tesis t JOIN t.pengarangCollection p WHERE UPPER(p.name) LIKE UPPER(:namaPengarang)", Tesis.class);
            query.setParameter("namaPengarang", "%" + kataKunci + "%");
            searchBy = "Pengarang";
        } else {
            query = entityManager.createNamedQuery(queryTypeSearch, Tesis.class);
            if (selectedIndex == 2) {
                query.setParameter(column, Integer.valueOf(kataKunci));
            } else {
                query.setParameter(column, "%" + kataKunci + "%");
            }
        }
        List<Tesis> results = query.getResultList();
        
        entityManager.getTransaction().commit();
        entityManager.close();

        List<HashMap<String, Object>> newResults = new ArrayList<>();
        for (Tesis tesis : results) {
            System.out.println(tesis.toString());
            HashMap<String, Object> hasilTesis = new HashMap<>();
            hasilTesis.put("judul", tesis.getJudul());
            String pengarang = "";
            for (Pengarang pgr : tesis.getPengarangCollection()) {
                pengarang = pgr.getName();
            }
            hasilTesis.put("pengarang", pengarang);
            hasilTesis.put("tahunTerbit", String.valueOf(tesis.getTahunTerbit()));
            hasilTesis.put("jumlahHalaman", String.valueOf(tesis.getJumlahHalaman()));
            newResults.add(hasilTesis);
        }
        
        Map<String, Object> parameters = new HashMap<>();
        parameters.put("querySearch", kataKunci);
        parameters.put("searchBy", searchBy);

        try {
            String jrxmlFile = new String("src/Report/reportSkripsi.jrxml");
            JasperReport jr = JasperCompileManager.compileReport(jrxmlFile);
            JasperPrint jp = JasperFillManager.fillReport(jr, parameters, new JRBeanCollectionDataSource(newResults));
            JasperViewer.viewReport(jp, false);
        } catch (JRException ex) {
            Logger.getLogger(PanelSkripsi.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception e) {
            Logger.getLogger(PanelSkripsi.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_btnPrintActionPerformed

    private void tabelSkripsiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelSkripsiMouseClicked
        // TODO add your handling code here:
        JTable target = (JTable) evt.getSource();
        int row = target.getSelectedRow();
        this.id = Integer.parseInt(target.getModel().getValueAt(row, 0).toString());

        EntityManager entityManager = Persistence.createEntityManagerFactory("tugasAkhirPBOPU").createEntityManager();
        entityManager.getTransaction().begin();
        TypedQuery<Tesis> query = entityManager.createNamedQuery("Tesis.findByTesisId", Tesis.class);
        query.setParameter("tesisId", this.id);
        Tesis daftarSkripsi = query.setMaxResults(1).getSingleResult();

        TypedQuery<Pengarang> queryGetPengarang = entityManager.createNamedQuery("Pengarang.findNamaByTesisId", Pengarang.class);
        queryGetPengarang.setParameter("tesisId", daftarSkripsi);
        Pengarang pgr = queryGetPengarang.getSingleResult();

        entityManager.getTransaction().commit();
        entityManager.close();

        inputJudul.setText(daftarSkripsi.getJudul());
        inputPengarang.setText(pgr.getName());
        inputJumlahHalaman.setText(String.valueOf(daftarSkripsi.getJumlahHalaman()));
        inputTahunTerbit.setText(String.valueOf(daftarSkripsi.getTahunTerbit()));
    }//GEN-LAST:event_tabelSkripsiMouseClicked

    private void inputPencarianKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputPencarianKeyTyped
        // TODO add your handling code here:
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            int selectedIndex = inputTipeSearch.getSelectedIndex();
            String queryTypeSearch = "Tesis.findByJudulLike";
            String column = "judul";
//            if (selectedIndex == 1) {
//                queryTypeSearch = "Tesis.findByPengarangLike";
//                column = "isbn";
//            } else 
            if (selectedIndex == 2) {
                queryTypeSearch = "Tesis.findByTahunTerbit";
                column = "tahunTerbit";
            }
            String kataKunci = inputPencarian.getText();

            EntityManager entityManager = Persistence.createEntityManagerFactory("tugasAkhirPBOPU").createEntityManager();
            entityManager.getTransaction().begin();
            TypedQuery<Tesis> query;
            if (selectedIndex == 1) {
                query = entityManager.createQuery("SELECT t FROM Tesis t JOIN t.pengarangCollection p WHERE UPPER(p.name) LIKE UPPER(:namaPengarang)", Tesis.class);
                query.setParameter("namaPengarang", "%" + kataKunci + "%");
            } else {
                query = entityManager.createNamedQuery(queryTypeSearch, Tesis.class);
                if (selectedIndex == 2) {
                    query.setParameter(column, Integer.valueOf(kataKunci));
                } else {
                    query.setParameter(column, "%" + kataKunci + "%");
                }
            }
            List<Tesis> results = query.getResultList();

            DefaultTableModel model = (DefaultTableModel) tabelSkripsi.getModel();
            model.setRowCount(0);
            for (Tesis data : results) {
                TypedQuery<Pengarang> queryGetPengarang = entityManager.createNamedQuery("Pengarang.findNamaByTesisId", Pengarang.class);
                queryGetPengarang.setParameter("tesisId", data);
                Pengarang pgr = queryGetPengarang.getSingleResult();
                Object[] baris = new Object[6];
                baris[0] = data.getTesisId();
                baris[1] = data.getJudul();
                baris[2] = data.getTahunTerbit();
                baris[3] = pgr.getName();
                baris[4] = data.getJumlahHalaman();
                model.addRow(baris);
            }
            entityManager.getTransaction().commit();
            entityManager.close();
        }
    }//GEN-LAST:event_inputPencarianKeyTyped

    private void inputPencarianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputPencarianActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputPencarianActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JTextField inputJudul;
    private javax.swing.JTextField inputJumlahHalaman;
    private javax.swing.JTextField inputPencarian;
    private javax.swing.JTextField inputPengarang;
    private javax.swing.JTextField inputTahunTerbit;
    private javax.swing.JComboBox<String> inputTipeSearch;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelAdd;
    private javax.swing.JTable tabelSkripsi;
    // End of variables declaration//GEN-END:variables
}
